#!/usr/bin/env python3

import gpio_control as control
import sht3x_sensor as sht3x
import pm_sensor as pm
import pwr_light_sensor as pwrlight
from i2c_switch_bus import I2CSwitchBus

import argparse
import sys

import json
import redis


#--------------------------------------------------------------------
# ------------------ redis
REDIS_SERVER_HOST = '127.0.0.1'
REDIS_SERVER_PORT = 6379
REDIS_SERVER_PASS = 'rigConnection@ip64'
r = redis.StrictRedis(host=REDIS_SERVER_HOST, port=REDIS_SERVER_PORT,
                      db=0, password=REDIS_SERVER_PASS)

def load_redis_cache():
  try:
    if r.exists('th_ps_pm') > 0:
      th_ps_pm = json.loads(r.get('th_ps_pm'))
      # print(th_ps_pm)
    else:
      # print('no key: "th_ps_pm" found in cache')
      th_ps_pm = None
  except Exception as e:
    print('rig cmd redis err: ', e)
    th_ps_pm = None
  finally:
    return th_ps_pm

#--------------------------------------------------------------------
# ------------------ arguments
parser = argparse.ArgumentParser()
# --- usb plug
usb_arghelp = 'usb on/off, valid value: "on" or "off"'
parser.add_argument('-u', '--usb', type=str, help=usb_arghelp)

# --- power switch
power_arghelp = 'power toggle or long press, valid value: "toggle", "longpress"'
parser.add_argument('-p', '--power', type=str, help=power_arghelp)

# --- PM sensor set wake/sleep
pm_sensor_set_arghelp = 'PM sensor wake/sleep/read, valid value: "wakeup", "sleep", ' + \
                        '"reset", "read", "pread", "active-mode", "passive-mode"'
parser.add_argument('-pm', '--pmsensor', type=str, help=pm_sensor_set_arghelp)

# --- power status
powerstatus_arghelp = 'read power status, valid value: "read" (it returns either "on" or "off")'
parser.add_argument('-ps', '--powerstatus', help=powerstatus_arghelp)

# --- temperature and humidity
temp_humid_arghelp = 'read temperature and humidity, valid value: "read"'
parser.add_argument('-th', '--temphumid', help=temp_humid_arghelp)

# --- fan pwm
fan_pwm_arghelp = 'set fan speed by pwm percentage value, valid value: percentage value in range [0, 100]'
parser.add_argument('-fp1', '--fanpwm1', type=int, help=fan_pwm_arghelp)
parser.add_argument('-fp2', '--fanpwm2', type=int, help=fan_pwm_arghelp)

# --- i2c bus
i2c_bus_arghelp = 'i2c bus operation, valid value: reset'
parser.add_argument('-ib', '--i2cbus', type=str, help=i2c_bus_arghelp)

# --- parse args
args = parser.parse_args()


#--------------------------------------------------------------------
# ------------------ app logic
if len(sys.argv) == 1:
  parser.print_help()

else:
  # ------ usb plug control
  if args.usb:
    if args.usb == 'on':
      control.set_usb_enabled(True)
    elif args.usb == 'off':
      control.set_usb_enabled(False)
    else:
      print(usb_arghelp)

  # ------ power status
  if args.powerstatus:
    if args.powerstatus == 'read':
      th_ps_pm = load_redis_cache()
      if th_ps_pm is not None:
        s = pwrlight.to_str(th_ps_pm['ps'])
        print('[cache]', s)
      else:
        _, s = pwrlight.read_light()
        print(s)
    else:
      print(powerstatus_arghelp)

  # ------ power control
  if args.power:
    if args.power == 'toggle':
      control.power_toggle()
    elif args.power == 'longpress':
      control.power_longpress()
    else:
      print(power_arghelp)

  # ------ PM sensor control
  if args.pmsensor:
    if args.pmsensor == 'wakeup':
      control.pm_sensor_set_wakeup(True)
    elif args.pmsensor == 'sleep':
      control.pm_sensor_set_wakeup(False)
    elif args.pmsensor == 'reset':
      control.pm_sensor_reset()
    elif args.pmsensor == 'read':
      th_ps_pm = load_redis_cache()
      if th_ps_pm is not None:
        result = pm.to_str(th_ps_pm['pm'])
        print('[cache]', result)
      else:
        pms = pm.PMSensor.instance()
        try:
          data = pms.read()
          print(data)
        except Exception as e:
          print(e)
        finally:
          pms.release_resource()
    elif args.pmsensor == 'pread':
      pms = pm.PMSensor.instance()
      data = pms.passive_read()
      print(data)
    elif args.pmsensor == 'active-mode':
      pms = pm.PMSensor.instance()
      pms.set_active_read_mode()
    elif args.pmsensor == 'passive-mode':
      pms = pm.PMSensor.instance()
      pms.set_passive_read_mode()
    else:
      print(pm_sensor_set_arghelp)

  # ------ temperature humidity sensor control
  if args.temphumid:
    if args.temphumid == 'read':
      th_ps_pm = load_redis_cache()
      if th_ps_pm is not None:
        result = sht3x.to_str(th_ps_pm['th'])
        print('[cache]\n' + result)
      else:
        result_str = sht3x.read_all()
        print(result_str)
    else:
      print(temp_humid_arghelp)

  # ------ fan pwm
  if args.fanpwm1:
    if args.fanpwm1 >= 0 and args.fanpwm1 <=100:
      control.set_pwm1(args.fanpwm1/100.0)
    else:
      print(fan_pwm_arghelp)

  if args.fanpwm2:
    if args.fanpwm2 >= 0 and args.fanpwm2 <=100:
      control.set_pwm2(args.fanpwm2/100.0)
    else:
      print(fan_pwm_arghelp)

  # ------ i2c bus
  if args.i2cbus:
    if args.i2cbus == 'reset':
      i2c_bus = I2CSwitchBus.instance()
      i2c_bus.switch_reset()
    else:
      print(i2c_bus_arghelp)
